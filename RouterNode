import javax.swing.*;

public class RouterNode {
  private int myID;
  private GuiTextArea myGUI;
  private RouterSimulator sim;
  private int[] costs = new int[RouterSimulator.NUM_NODES]; // creates new array with length NUM_NODES from Routersimulator code.
  private int[] dVector = new int[RouterSimulator.NUM_NODES]; 
  private int[] routes = new int[RouterSimulator.NUM_NODES]; 
  private boolean Poison = true; // used for poison reverse

  
    public RouterNode(int ID, RouterSimulator sim, int[] costs) { // creates constructor
    myID = ID;
    this.sim = sim;
    myGUI =new GuiTextArea("  Router #"+ ID + " output  "); // window

    System.arraycopy(costs, 0, this.costs, 0, RouterSimulator.NUM_NODES); // copies costs to this.costs
    System.arraycopy(costs, 0, this.dVector, 0, RouterSimulator.NUM_NODES);

    // If cost is INF, then route=myID, if cost isnt INF ,then route = index of loop
    for (int i = 0; i < RouterSimulator.NUM_NODES ; i++ ) {
      if (costs[i] != RouterSimulator.INFINITY){
        routes[i] = i;
      }
      else {
        routes[i] = myID;
      }
    }

    // sends its costs to neighbor nodes
    for (int i = 0; i < RouterSimulator.NUM_NODES ; i++ ) {
      if (costs[i] != RouterSimulator.INFINITY && i != myID){
        sendUpdate(new RouterPacket(myID,i,dVector)); // calls sendupdate
      }
    }
  }

  public void recvUpdate(RouterPacket pkt) { //checks if cost has changed
    boolean Change = false;

    for (int i = 0; i < RouterSimulator.NUM_NODES ; i++ ) {
      if ( pkt.mincost[i] + costs[pkt.sourceid] < dVector[i] ){ // checks if new cost is smaller than the one before
        dVector[i] = pkt.mincost[i] + costs[pkt.sourceid];// updates cost to new one
        routes[i] = routes[pkt.sourceid]; // updates 
        Change = true; // If costs change - tell other nodes
      }
      if ( routes[i] == pkt.sourceid && pkt.mincost[i] + costs[pkt.sourceid] > costs[i] ) {
        dVector[i] = costs[i];
        routes[i] = i;
        Change = true;
      }
      if (!Change && pkt.mincost[i] > dVector[i] + dVector[pkt.sourceid]){
        sendUpdate(new RouterPacket(myID,i,dVector));
      }
    }

    // If costs changed - send update to all neigboring nodes
    if (Change){
      for (int i = 0; i < RouterSimulator.NUM_NODES ; i++ ) {
        if (costs[i] != RouterSimulator.INFINITY && i != myID)
          sendUpdate(new RouterPacket(myID,i,dVector));
      }
    }
  }



  //--------------------------------------------------
  private void sendUpdate(RouterPacket pkt) {

    // If router ID = to destination ID, then we poison(INF) cost it
    if ( Poison ){
      for (int i = 0; i < RouterSimulator.NUM_NODES; i++ ) {
        if (routes[i] == pkt.destid){
          pkt.mincost[i] = RouterSimulator.INFINITY;
        }
      }
    }
    sim.toLayer2(pkt); // calls function from 'RouterSimulator', which checks if the data is valid and prints info
  }

  public void printDistanceTable() {
    myGUI.println("________________________________");
    myGUI.println("Table of cost and route for router #" + myID);
    myGUI.println("Time: "+ sim.getClocktime());
    myGUI.println("________________________________");

    String destLine = "Destination | ";
    for (int i = 0; i < RouterSimulator.NUM_NODES ; i++) { // prints routers ID
      destLine += i + " ";
    }
    myGUI.println(F.format(destLine,10));
    myGUI.println("________________________________");

    String costString = "    Cost        | ";
    String routeString = "    Route      | ";
    for (int i = 0; i < RouterSimulator.NUM_NODES ; i++ ) { // prints cost and route of routers
      costString += dVector[i] + " ";
      routeString += routes[i] + " ";
    }
    
    myGUI.println(F.format(costString,10));
    myGUI.println(F.format(routeString,10));
    myGUI.println("   ");
    myGUI.println("   ");
    myGUI.println("   ");
  }

  public void updateLinkCost(int dest, int newcost) {
    costs[dest] = newcost;// updates cost
    boolean Change = false; // nothing changed yet

    if (newcost < dVector[dest]){ // checks if old cost is bigger than new cost, if yes, updates
      dVector[dest] = newcost;
      routes[dest] = dest;
      Change = true;// change has occurred
    }
    else if (routes[dest] == dest){
      dVector[dest] = newcost;
      Change = true;// change has occurred
    }

    // If costs changed send update to all neigboring nodes
    if (Change){
      for (int i = 0; i < RouterSimulator.NUM_NODES ; i++ ) {
        if (costs[i] != RouterSimulator.INFINITY && i != myID)
        sendUpdate(new RouterPacket(myID,i,dVector));
      }
    }
  }
}
